/**
 * Dev Jokes API
 * A free API for developer jokes
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Joke model module.
 * @module model/Joke
 * @version 1.0.0
 */
class Joke {
    /**
     * Constructs a new <code>Joke</code>.
     * @alias module:model/Joke
     */
    constructor() { 
        
        Joke.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Joke</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Joke} obj Optional instance to populate.
     * @return {module:model/Joke} The populated <code>Joke</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Joke();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('setup')) {
                obj['setup'] = ApiClient.convertToType(data['setup'], 'String');
            }
            if (data.hasOwnProperty('punchline')) {
                obj['punchline'] = ApiClient.convertToType(data['punchline'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('difficulty')) {
                obj['difficulty'] = ApiClient.convertToType(data['difficulty'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Joke</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Joke</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['setup'] && !(typeof data['setup'] === 'string' || data['setup'] instanceof String)) {
            throw new Error("Expected the field `setup` to be a primitive type in the JSON string but got " + data['setup']);
        }
        // ensure the json data is a string
        if (data['punchline'] && !(typeof data['punchline'] === 'string' || data['punchline'] instanceof String)) {
            throw new Error("Expected the field `punchline` to be a primitive type in the JSON string but got " + data['punchline']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['difficulty'] && !(typeof data['difficulty'] === 'string' || data['difficulty'] instanceof String)) {
            throw new Error("Expected the field `difficulty` to be a primitive type in the JSON string but got " + data['difficulty']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
Joke.prototype['id'] = undefined;

/**
 * @member {String} setup
 */
Joke.prototype['setup'] = undefined;

/**
 * @member {String} punchline
 */
Joke.prototype['punchline'] = undefined;

/**
 * @member {String} category
 */
Joke.prototype['category'] = undefined;

/**
 * @member {module:model/Joke.DifficultyEnum} difficulty
 */
Joke.prototype['difficulty'] = undefined;





/**
 * Allowed values for the <code>difficulty</code> property.
 * @enum {String}
 * @readonly
 */
Joke['DifficultyEnum'] = {

    /**
     * value: "easy"
     * @const
     */
    "easy": "easy",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "hard"
     * @const
     */
    "hard": "hard"
};



export default Joke;

