/**
 * Dev Jokes API
 * A free API for developer jokes
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Jokes service.
* @module api/JokesApi
* @version 1.0.0
*/
export default class JokesApi {

    /**
    * Constructs a new JokesApi. 
    * @alias module:api/JokesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiJokesCategoryCategoryGet operation.
     * @callback module:api/JokesApi~apiJokesCategoryCategoryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get jokes by category
     * @param {String} category Joke category
     * @param {module:api/JokesApi~apiJokesCategoryCategoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiJokesCategoryCategoryGet(category, callback) {
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling apiJokesCategoryCategoryGet");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/jokes/category/{category}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiJokesDifficultyLevelGet operation.
     * @callback module:api/JokesApi~apiJokesDifficultyLevelGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get jokes by difficulty
     * @param {module:model/String} level Difficulty level
     * @param {module:api/JokesApi~apiJokesDifficultyLevelGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiJokesDifficultyLevelGet(level, callback) {
      let postBody = null;
      // verify the required parameter 'level' is set
      if (level === undefined || level === null) {
        throw new Error("Missing the required parameter 'level' when calling apiJokesDifficultyLevelGet");
      }

      let pathParams = {
        'level': level
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/jokes/difficulty/{level}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiJokesGet operation.
     * @callback module:api/JokesApi~apiJokesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns jokes with pagination
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [limit = 10)] Number of items per page
     * @param {String} [category] Filter by category
     * @param {String} [difficulty] Filter by difficulty
     * @param {module:api/JokesApi~apiJokesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiJokesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'category': opts['category'],
        'difficulty': opts['difficulty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/jokes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiJokesIdGet operation.
     * @callback module:api/JokesApi~apiJokesIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a joke by ID
     * @param {Number} id Joke ID
     * @param {module:api/JokesApi~apiJokesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiJokesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiJokesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/jokes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiJokesRandomGet operation.
     * @callback module:api/JokesApi~apiJokesRandomGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a random joke
     * @param {module:api/JokesApi~apiJokesRandomGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiJokesRandomGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/jokes/random', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
